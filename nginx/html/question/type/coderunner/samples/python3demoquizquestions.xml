<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 0  -->
  <question type="category">
    <category>
        <text>Python Full Demo Quiz</text>

    </category>
  </question>

<!-- question: 912  -->
  <question type="coderunner">
    <name>
      <text>Car</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>The following question asks the students to write a Python3 class to a given specification. This can be done with any standard Python3 question type in which the student's code is followed by the per-test-case code. This particular example uses our COSC121 question type, which enforces pylint compatibility.</p><p>For those unfamiliar with Python classes, a possible solution is hidden in the following white panel - click and drag over it to see the code.</p><pre style="color:white; background-color:white">class Car:
    """A class that represents a car with a model, a year
       and a speed, plus accelerate and brake methods to
       alter the speed, plus a honk_horn method.
    """
    def __init__(self, model, year, speed=0):
        """Initialiser"""
        self.model = model
        self.year = year
        self.speed = speed

    def accelerate(self):
        """Speed goes up by 5."""
        self.speed += 5

    def brake(self):
        """Speed goes down by 5"""
        self.speed = max(0, self.speed - 5)

    def honk_horn(self):
        """Print a beep-beep message"""
        print("{} goes 'beep beep'".format(self.model))</pre>
<hr>
<h3>Exercise: My first car</h3>

<p>Write a class named <code style="padding:2px;">Car</code> that has the following data attributes:</p>

<ul>
	<li>model (car's model, e.g. "Toyota")</li>
	<li>year (car's manufacturing year , e.g "2000")</li>
	<li>speed (car's current speed, in km/h)</li>
</ul>

<p>The <code style="padding:2px;">Car</code> class should have an <code style="padding:2px;">__init__</code> method (i.e., an initialiser) that accepts the car's <code style="padding:2px;">model</code>, <code style="padding:2px;">year</code>, and <code style="padding:2px;">speed</code> as arguments. These values should assigned to the object's <code style="padding:2px;">model,</code> <code style="padding:2px;">year</code>, and <code style="padding:2px;">speed</code> data attributes. If <code style="padding:2px;">speed</code> isn't specified, then it should automatically be set to 0.</p>

<p>The class should also have the following methods:</p>

<ul>
	<li><code style="padding:2px;">accelerate</code> This method should add 5 to the <code style="padding:2px;">speed</code> data attribute each time it is called.</li>
	<li><code style="padding:2px;">brake</code> This method should subtract 5 from the speed data attribute each time it is called. The speed should not go below 0, so if <code style="padding:2px;">brake()</code> is called when the speed is already 0, the speed should stay 0.</li>
		<li><code style="padding:2px;">honk_horn</code> This method should print <code style="padding:2px;">{model} goes 'beep beep'</code>, where <code style="padding:2px;">{model}</code> is the object's model.</li>
</ul>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>0.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3_cosc121</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>10, 20, ...</penaltyregime>
    <precheck>1</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <answer><![CDATA[class Car:
    """A class that represents a car with a model, a year
       and a speed, plus accelerate and brake methods to
       alter the speed, plus a honk_horn method.
    """
    def __init__(self, model, year, speed=0):
        """Initialiser"""
        self.model = model
        self.year = year
        self.speed = speed

    def accelerate(self):
        """Speed goes up by 5."""
        self.speed += 5

    def brake(self):
        """Speed goes down by 5"""
        self.speed = max(0, self.speed - 5)

    def honk_horn(self):
        """Print a beep-beep message"""
        print("{} goes 'beep beep'".format(self.model))]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[my_car = Car("Toyota", 1975)
print(my_car.speed)]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>0</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[my_car = Car("Zastava", 2001, 30)
my_car.accelerate()
my_car.accelerate()
my_car.brake()
print(my_car.speed)]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>35</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[my_car = Car("Ford", 1993)
my_car.accelerate()
my_car.accelerate()
my_car.accelerate()
my_car.accelerate()
my_car.accelerate()
my_car.brake()
print(my_car.speed)]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>20</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[my_car = Car("Toyota", 2004, 50)
my_car.accelerate()
my_car.brake()
print(my_car.speed)]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>50</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[my_car = Car("Rust bucket", 1987)
my_car.honk_horn()]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Rust bucket goes 'beep beep'</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[my_car = Car("Ford", 2001, 5)
my_car.accelerate()
my_car.brake()
my_car.brake()
my_car.brake()
print(my_car.speed)]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>0</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 1028  -->
  <question type="coderunner">
    <name>
      <text><![CDATA[complex for -> while]]></text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>This question&nbsp;uses a capability of our standard <i>python3_cosc121</i> question type that allows the question author to specify, via template parameters, Python constructs that must not appear in the submitted code (<i>for</i>&nbsp;in this case) and also constructs that <i>must</i>&nbsp;appear (<i>while</i>&nbsp;in this case).</p>
<hr>
<p><b>The question</b></p>
<p>Rewrite the following code, which uses <span style="font-family: 'courier new', courier, monospace;">for</span> loops, so that it uses <span style="font-family: 'courier new', courier, monospace;">while</span> loops instead. Your function must not use <i>any</i> for loops and must remain pylint compliant.</p>
<pre>def print_names(people):
    """ A function to print a list of people's names. The parameter
        'people' is a list of people, where each person is represented
        as a list of their names.
    """
    for person in people:
        to_print = ""
        for name in person:
            to_print += name + " "
        print(to_print)
</pre>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3_cosc121</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>10,20,...</penaltyregime>
    <precheck>1</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <answer><![CDATA[def print_names(people):
    """A function to print a list of people's names. The parameter
        people is a list that represents a person as a list of their
        name.
    """
    i = 0
    while i < len(people):
        person = people[i]
        to_print = ""
        j = 0
        while j < len(person):
            name = person[j]
            to_print += name + " "
            j += 1
        print(to_print)
        i += 1]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams><![CDATA[{"requiredconstructs":["while"], "proscribedconstructs":["for"]}]]></templateparams>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print_names([
   ['John', 'Smith'],
   ['Mary', 'Keyes'],
   ['Jane', 'Doe'],
   ['Angus']])</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>John Smith
Mary Keyes
Jane Doe
Angus</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print_names([
    ['Bilbo', 'Baggins'],
    ['Gollum'],
    ['Tom', 'Bombadil'],
    ['Aragorn']])
</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Bilbo Baggins
Gollum
Tom Bombadil
Aragorn </text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print_names([])</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text></text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 1054  -->
  <question type="coderunner">
    <name>
      <text>Currency Converter</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<h4>Testing GUI programs</h4><p>Testing programs that involve any form of graphical output is fundamentally difficult in any environment. CodeRunner is no exception. However, we have made a couple of reasonably successful forays into the area.</p><p></p><ol><li>In Matlab we've written question asking students to plot graphs. These are graded either by replacing the graph-plotting functions with our own and checking the data passed to them or by inspecting the graph object generated by the standard built-in plotting functions.&nbsp;</li><li>In Python3 we've written a mock <i>tkinter</i> (or a very tiny subset of it -- the subset we teach at the end of COSC121) that is able to simulate rudimentary event handling and can then output a textual representation of the state of the tkinter GUI. The output is checked using the regular expression grader rather than the normal exact match grader; we check for major behavioural aspects, such as whether an expected value appears after a particular button is clicked, rather than the precise look and feel.<br></li></ol>This question involves the second of those question types.<p></p><p>Because tkinter is such a complex and ill-specified beast, students fairly frequently write programs that appear to work correctly but are marked wrong by CodeRunner's tkinter question type. For example, they might use tkinter features that we do not implement or they might use strange layouts with empty rows and column that collapse to nothing on screen. Mostly, though, students who program using just the methods and techniques that we teach in the course get marked right and we have found tkinter questions useful in both labs and exams. We never apply a resubmission penalty to tkinter questions and in exams we tell students to mark any question that is inexplicably being graded wrong with a flag and we then mark in by hand.</p><p>Below is an example of a tkinter question, used in a COSC121 lab. A possible answer is in the following textarea, which you can enlarge if you wish to peek at it.</p>
<textarea rows="5" columns="90" style"color:="" white;="" background-color:white"="" style="margin: 0px 0px 10px; width: 677px; height: 60px;">'''A GUI-based currency converter program'''

from tkinter import *
from tkinter.ttk import *

# The format for the label displaying
DISPLAY = "${0:.2f} NZD is {1:.2f} {2}"

class CurrencyConverterGUI(object):
    """A class that represents the GUI for the currency converted"""

    def __init__(self, window, currencies):
        """Set up the GUI and the event handlers"""
        self.window = window
        self.currencies = currencies
        Label(window, text="Currency Converter").grid(row=0, column=0)
        Label(window, text="NZD amount:").grid(row=1, column=0)
        Label(window, text="Convert to:").grid(row=2, column=0)
        self.message = StringVar()
        Label(window, textvariable=self.message).grid(row=3, column=0, columnspan=2)
        self.nzd = StringVar()
        self.nzd.set('0.0')
        self.nzd.trace_variable('w', self.convert)
        Entry(window, textvariable=self.nzd).grid(row=1, column=1)
        self.selection = StringVar()
        self.selection.set(sorted(currencies.keys())[0])
        select = Combobox(window, values=sorted(currencies.keys()), textvariable=self.selection)
        select.grid(row=2, column=1)
        select.bind('&lt;&lt;ComboboxSelected&gt;&gt;', self.convert)
        self.currencies = currencies
        self.convert()  # Set the initial message


    def convert(self, *rest):
        '''Called when the text entry or the combo box changes.
           Displays the converted currency in the display label.
        '''
        nzd_string = self.nzd.get().strip()
        nzd = 0.0 if nzd_string == '' else float(nzd_string)
        currency = self.selection.get()
        rate = self.currencies[currency]
        amount = nzd * rate
        self.message.set(DISPLAY.format(nzd, amount, currency))



def main():
    '''The main function'''
    european_currencies = {"Albanian Lek": 87.09,
                           "British Pound Sterling": 0.49,
                           "Euro":0.62,
                           "Hungarian Forint": 193.26,
                           "Kazakhstani Tenge": 143.74,
                           "Norwegian Krone": 5.09,
                           "Swiss Franc": 0.75,
                           "Turkish Lira": 1.79}
    window = Tk()
    converterGUI = CurrencyConverterGUI(window, european_currencies)
    window.mainloop()

main()
</textarea>
<hr>
<p><b>The question</b></p><p>You are to write a currency conversion application that converts from NZ dollars to one of a number of known currencies.</p>
<p>Your application should look like the following: the image on the left shows the application when it first starts, and the image on the right shows the state after an amount of money has been entered and the currency changed. The application should use a grid with four rows and two columns. The text used in all labels must be exactly as shown, but the precise choice of font sizes, grid padding values and similar layout parameters is over to you.</p>
<p>The label displaying the currency conversion &nbsp;should display the string '$0.00 NZD is 0.00 Albanian Lek' when the application is first launched and should be updated whenever the NZD amount&nbsp;<em>or</em> the currency changes.</p>
<table border="0" cellpadding="20">
<tbody>
<tr>
<td><img src="@@PLUGINFILE@@/tk_023.png" alt="" width="294" height="223"></td>
<td><img src="@@PLUGINFILE@@/tk_025.png" alt="" width="294" height="223"></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>[Your images may show uneven blue highlighting in the combobox; this is a Tk bug and can be ignored.]</p>
<p>Your application should start with the following skeleton:</p>
<pre>'''A GUI-based currency convertor program'''

from tkinter import *
from tkinter.ttk import *

# The format for the label displaying
DISPLAY = "${0:.2f} NZD is {1:.2f} {2}"

class CurrencyConverterGUI(object):

    def __init__(self, window, currencies):
        pass  # Your code goes here


    def convert(self, *rest):
        '''Called when the text entry or the combo box changes.
           Displays the converted currency in the display label.
        '''
        pass  # Your code goes here



def main():
    '''The main function'''
    european_currencies = {"Albanian Lek": 87.09,
                           "British Pound Sterling": 0.49,
                           "Euro":0.62,
                           "Hungarian Forint": 193.26,
                           "Kazakhstani Tenge": 143.74,
                           "Norwegian Krone": 5.09,
                           "Swiss Franc": 0.75,
                           "Turkish Lira": 1.79}
    window = Tk()
    converterGUI = CurrencyConverterGUI(window, european_currencies)
    window.mainloop()

main()
</pre>]]></text>
<file name="tk_021.png" path="/" encoding="base64"></file>
<file name="tk_022.png" path="/" encoding="base64"></file>
<file name="tk_023.png" path="/" encoding="base64"></file>
<file name="tk_025.png" path="/" encoding="base64">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</file>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3_tkinter</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <answer><![CDATA['''A GUI-based currency converter program'''

from tkinter import *
from tkinter.ttk import *

# The format for the label displaying
DISPLAY = "${0:.2f} NZD is {1:.2f} {2}"

class CurrencyConverterGUI(object):
    """A class that represents the GUI for the currency converter"""

    def __init__(self, window, currencies):
        """Set up the GUI and the event handlers"""
        self.window = window
        self.currencies = currencies
        Label(window, text="Currency Converter").grid(row=0, column=0)
        Label(window, text="NZD amount:").grid(row=1, column=0)
        Label(window, text="Convert to:").grid(row=2, column=0)
        self.message = StringVar()
        Label(window, textvariable=self.message).grid(row=3, column=0, columnspan=2)
        self.nzd = StringVar()
        self.nzd.set('0.0')
        self.nzd.trace_variable('w', self.convert)
        Entry(window, textvariable=self.nzd).grid(row=1, column=1)
        self.selection = StringVar()
        self.selection.set(sorted(currencies.keys())[0])
        select = Combobox(window, values=sorted(currencies.keys()), textvariable=self.selection)
        select.grid(row=2, column=1)
        select.bind('<<ComboboxSelected>>', self.convert)
        self.currencies = currencies
        self.convert()  # Set the initial message


    def convert(self, *rest):
        '''Called when the text entry or the combo box changes.
           Displays the converted currency in the display label.
        '''
        nzd_string = self.nzd.get().strip()
        nzd = 0.0 if nzd_string == '' else float(nzd_string)
        currency = self.selection.get()
        rate = self.currencies[currency]
        amount = nzd * rate
        self.message.set(DISPLAY.format(nzd, amount, currency))



def main():
    '''The main function'''
    european_currencies = {"Albanian Lek": 87.09,
                           "British Pound Sterling": 0.49,
                           "Euro":0.62,
                           "Hungarian Forint": 193.26,
                           "Kazakhstani Tenge": 143.74,
                           "Norwegian Krone": 5.09,
                           "Swiss Franc": 0.75,
                           "Turkish Lira": 1.79}
    window = Tk()
    converterGUI = CurrencyConverterGUI(window, european_currencies)
    window.mainloop()

main()
]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>Check that the initial state contains
labels 'Currency Converter', 'NZD amount',
'Convert to' and '$0.00 NZD is 0.00 Albanian Lek'</text>
      </testcode>
      <stdin>
                <text>getTk().display()</text>
      </stdin>
      <expected>
                <text>Label.*Currency Converter.*Label.*NZD amount.*Label.*Convert to.*Label.*\$0\.00 NZD is 0\.00 Albanian Lek</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>Check that changing the NZD amount to 12.60
results in the line
$12.60 NZD is 1097.33 Albanian Lek</text>
      </testcode>
      <stdin>
                <text>getTk().text_entry(Selector(widget_type='Entry'), '12.60')
getTk().display()</text>
      </stdin>
      <expected>
                <text>\$12\.60 NZD is 1097\.33 Albanian Lek</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>Check that changing the NZD amount to 12.60
and then the combo box to Norwegian Krone
results in the line
$12.60 is 64.13 Norwegian Krone
$12.60 NZD is 1097.33 Albanian Lek</text>
      </testcode>
      <stdin>
                <text>getTk().text_entry(Selector(widget_type='Entry'), '12.60')
getTk().combo_select(Selector(widget_type='Combobox'), 'Norwegian Krone')
getTk().display()</text>
      </stdin>
      <expected>
                <text>\$12\.60 NZD is 64.13 Norwegian Krone</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 888  -->
  <question type="coderunner">
    <name>
      <text>Process name</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>The following illustrates a trivial "write a program" question. This question does not use the <i>pylint</i>&nbsp;style checker, so a standard "script" approach, with global code is acceptable. A simple solution might be:<br></p><pre>name = input("What is your name? ")
print("Welcome to CodeRunner, " + name + ".")
print("May the force be with you.")
</pre>
<hr>
<p>Write a python3 program that uses the <i>input()</i>&nbsp;function (with a prompt string as shown in the example below) to read a person's name from "standard input" (e.g. the keyboard), and then prints a two-line "Welcome to CodeRunner" message incorporating that name as shown in the example table below. Don't forget to include the periods at the end of the message lines and make sure you have exactly one space after the comma.&nbsp;</p><p>This question uses exact matching, so white space matters. If you can't see why your answer is being marked wrong, click the <i>Show differences</i>&nbsp;button.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0, 10, 20, ...</penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>8</answerboxlines>
    <answerboxcolumns>70</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template>__saved_input__ = input
def input(prompt=''):
    s = __saved_input__(prompt)
    print(s)
    return s

{{STUDENT_ANSWER}}


{{TEST.testcode}}</template>
    <iscombinatortemplate>0</iscombinatortemplate>
    <answer><![CDATA[name = input("What is your name? ")
print("Welcome to CodeRunner, " + name + ".")
print("May the force be with you.")
]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>EqualityGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Angus McGurkinshaw</text>
      </stdin>
      <expected>
                <text>What is your name? Angus McGurkinshaw
Welcome to CodeRunner, Angus McGurkinshaw.
May the force be with you.</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Pope Pius IX</text>
      </stdin>
      <expected>
                <text>What is your name? Pope Pius IX
Welcome to CodeRunner, Pope Pius IX.
May the force be with you.</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Rumplestiltskin</text>
      </stdin>
      <expected>
                <text>What is your name? Rumplestiltskin
Welcome to CodeRunner, Rumplestiltskin.
May the force be with you.</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 897  -->
  <question type="coderunner">
    <name>
      <text>Process name (pylinted)</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p></p>
<h4>Enforcing <i>pylint</i>&nbsp;compliance</h4><p>In our introductory programming course, we usually run student-submitted code through the <i>pylint</i>&nbsp;style checker (see&nbsp;<a href="http://www.pylint.org/">http://www.pylint.org/</a>) before running it. To achieve this we use special extended question types that enforce pylint compliance and various other constraints, such as a limit on how many global constants can be used. Here is the previous question again, but this time requiring a pylint-compliant solution. You'll see that there's now a <i>Precheck</i>&nbsp;button, which gives you an unlimited number of penalty-free submissions to pylint before you click <i>Check</i>&nbsp;to see if your code passes the runtime checks.</p><p>A possible solution to the question is hidden in the following white box; click and drag over it to see the hidden text.</p><pre style="color:white; background-color:white;">'''This solution is pylint compliant'''
def main():
    '''The main function'''
    name = input("What is your name? ")
    print("Welcome to CodeRunner, " + name + ".")
    print("May the force be with you.")

main()</pre>
<hr>
<p><b>The question</b></p><p>Write a pylint-compliant python3 program that uses the <i>input()</i>&nbsp;function (with a prompt string as shown in the example below) to read a person's name from "standard input" (e.g. the keyboard), and then prints a two-line "Welcome to CodeRunner" message incorporating that name, as shown in the example table below. Don't forget to include the period at the end of the message and make sure you have exactly one space after the comma. [This question uses exact matching, so white space matters.]</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3_cosc121</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0, 10, 20, ...</penaltyregime>
    <precheck>1</precheck>
    <showsource>0</showsource>
    <answerboxlines>8</answerboxlines>
    <answerboxcolumns>70</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <answer><![CDATA['''This solution is pylint compliant'''
def main():
    '''The main function'''
    name = input("What is your name? ")
    print("Welcome to CodeRunner, " + name + ".")
    print("May the force be with you.")


main()]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams><![CDATA[{"maxnumconstants": 0}]]></templateparams>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Angus McGurkinshaw</text>
      </stdin>
      <expected>
                <text>What is your name? Angus McGurkinshaw
Welcome to CodeRunner, Angus McGurkinshaw.
May the force be with you.</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Pope Pius IX</text>
      </stdin>
      <expected>
                <text>What is your name? Pope Pius IX
Welcome to CodeRunner, Pope Pius IX.
May the force be with you.</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Rumplestiltskin</text>
      </stdin>
      <expected>
                <text>What is your name? Rumplestiltskin
Welcome to CodeRunner, Rumplestiltskin.
May the force be with you.</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 885  -->
  <question type="coderunner">
    <name>
      <text>Python function that prints: print_squares</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<h4 style="margin-bottom: 0cm;">A function that prints</h4><p><br></p><p>A common problem for students learning Python is the distinction between functions that return a value ("true" functions) and functions that print output and (preferably) don't return a value ("procedures"). This is an example of the latter.</p><p style="margin-bottom: 0cm;">Write a Python3 function <span style="font-family: 'courier new', 'courier', monospace;">print_sqrs_1_to_n(n)</span>&nbsp;that takes <span style="font-style: normal;">a single positive integer as a parameter and <strong>prints</strong> a table of all integers and their squares from 1 up to and including <span style="font-family: 'courier new', 'courier', monospace;">n</span>, formatted as below. The output from your function, when called with the code in the Test column, should be exactly as shown in the Result column.</span></p><p>The penalty regime for this question is 5, 15, 25, ... i.e., there is a 5% penalty for the first wrong submission but the penalty thereafter rises by 10% for each wrong submission.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>5, 10, 20, ...</penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <answer><![CDATA[def print_sqrs_1_to_n(n):
    """ Print a display of the squares of all numbers from 1 to
        the given parameter n.
    """
    for i in range(1, n + 1):
        print("{0} * {0} = {1}".format(i, i * i))]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print_sqrs_1_to_n(5)</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>1 * 1 = 1
2 * 2 = 4
3 * 3 = 9
4 * 4 = 16
5 * 5 = 25</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print_sqrs_1_to_n(3)</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>1 * 1 = 1
2 * 2 = 4
3 * 3 = 9</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print_sqrs_1_to_n(1)</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>1 * 1 = 1</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print_sqrs_1_to_n(10)</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>1 * 1 = 1
2 * 2 = 4
3 * 3 = 9
4 * 4 = 16
5 * 5 = 25
6 * 6 = 36
7 * 7 = 49
8 * 8 = 64
9 * 9 = 81
10 * 10 = 100</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 886  -->
  <question type="coderunner">
    <name>
      <text>RLE</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<h4>A more-challenging function</h4><p>Sequences of numbers in which there are frequent "runs" of a particular number repeating several times can often be more compactly represented by use of what is called "run length encoding". A list is run-length encoded by representing it as a list of pairs (2-tuples), where each pair is a number and the length of the "run" of that number, where the length is 1 if a number occurs once, 2 if it occurs twice in a row, etc. Write a function <em>run_length_encode(nums)</em>&nbsp;that returns the run-length encoded representation of the list of integers, <em>nums</em>.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>10, 20, ...</penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <answer><![CDATA[def run_length_encode(nums):
    """Return the run-length-encoded representation of the
       list of ints in 'nums'.
    """
    result = []
    current = None
    count = 0
    for num in nums:
        if num == current:
            count += 1
        else:
            if current is not None:
               result.append((current, count))
            current = num
            count = 1
    if current is not None:
        result.append((current, count))
    return result]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>data = [5,5,5,10,10]
print(run_length_encode(data))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>[(5, 3), (10, 2)]</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>data = [10, 20, 30, 30, 30, 30]
print(run_length_encode(data))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>[(10, 1), (20, 1), (30, 4)]</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print(run_length_encode([1]))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>[(1, 1)]</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print(run_length_encode([]))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>[]</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>data = [-1, -1, -2, -2, -2, -3, -3, -3, -3]
print(run_length_encode(data))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>[(-1, 2), (-2, 3), (-3, 4)]</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>data = [-1, -1, -2, -2, -2, -3, -3, -3]
print(run_length_encode(data))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>[(-1, 2), (-2, 3), (-3, 3)]</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 900  -->
  <question type="coderunner">
    <name>
      <text>Skool-z-Kool</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>And now a more-significant example of a write-a-program question. This one is not pylint checked.&nbsp;</p><p>Normally in assignment questions of this sort we would show the students only the first failing test case, but in this tutorial introduction all are shown.</p><hr><p><span style="color: inherit; font-family: inherit; font-size: 28px; font-weight: bold; line-height: 40px;">Shapes</span><br></p>
<p>Welcome to Skool-z-Kool, a non-profit organisation that intends to develop simple Python programs for use by school children. The programs will have a dual role: they will be used to teach the younger children simple educational concepts, but will also be used as example programs for older children learning to program in Python.</p>
<p>As an enthusiastic volunteer, you have been invited to write a program to introduce young children to some different 2D geometric shapes. Your mentor has suggested that as a pilot study, you write a program dealing with just two shapes: squares and triangles. Both shapes will be drawn on the terminal as a pattern of asterisks (ie, *'s). The program first asks the user what shape is to be drawn, then asks whether the shape should be drawn filled or unfilled, and finally asks for the size. The required shape is then drawn and the program exits.</p>
<h3>Input</h3>
<p>The program reads three responses from the user (i.e. "standard input") as follows:</p>
<p>1. The shape to draw is requested from the user with the prompt <span style="font-family: 'courier new', 'courier', monospace;">"Enter shape to draw: "</span>.&nbsp;<em>Note that the prompt has a space after the colon.</em></p>
<p style="padding-left: 30px;">The only two acceptable inputs, which must be treated case-insensitively, are <span style="font-family: 'courier new', 'courier', monospace;">"square"</span> and <span style="font-family: 'courier new', 'courier', monospace;">"triangle"</span>. Any other response results in the error message <span style="font-family: 'courier new', 'courier', monospace;">"Invalid input. Try again."</span> and the prompt for input is repeated. This continues until a valid response is received.&nbsp;</p>
<p>2. The program then prompts the user with <span style="font-family: 'courier new', 'courier', monospace;">"Filled or unfilled? "</span> <em>(Note the space after the question mark)</em>.</p>
<p style="padding-left: 30px;">The user must enter (case-insensitively) either <span style="font-family: 'courier new', 'courier', monospace;">"filled"</span>&nbsp;or <span style="font-family: 'courier new', 'courier', monospace;">"unfilled"</span>; anything else results in the error message <span style="font-family: 'courier new', 'courier', monospace;">"Invalid input. Try again."</span> and the prompt for input is repeated, continuing until valid input is received.</p>
<p>3. The program lastly prompts the user for <span style="font-family: 'courier new', 'courier', monospace;">"Size: "</span> (with a space after the colon).</p>
<p style="padding-left: 30px;">A response in the range 1 to 100 inclusive is expected. Anything else gives the error message <span style="font-family: 'courier new', 'courier', monospace;">"Invalid input. Try again." </span>and repeats until a valid input is received.</p>
<h3>Output details</h3>
<p>Apart from the prompts and error messages as above, the output from the program is either</p>
<ol>
<li>a square of asterisks of the given size, unfilled or filled as in the examples below, or</li>
<li>a right-angled triangle with height and base-width of the given size and a vertical left-hand edge, unfilled or filled, as shown below.</li>
</ol>
<p>The output shape must be preceded by one extra blank line, following the final size prompt line.</p>
<p>For example, a typical run of the program might be:</p>
<p><tt>Enter shape to draw: <span style="text-decoration: underline;"><em>sqare</em></span><br>Invalid input. Try again.<br> Enter shape to draw: <span style="text-decoration: underline;"><em>square</em></span><br>Filled or unfilled? <span style="text-decoration: underline;"><em>unfilled</em></span><br> Size: <span style="text-decoration: underline;"><em>4</em></span></tt></p>
<pre>****
*  *
*  *
****
</pre>
<p>Note that in the example output above, the input that is typed by the interactive user is shown in underlined italics. In the examples and test output it is shown in plain text.</p><p>The penalty regime for this question is 10%, 20%, ..., i.e. there is a cumulative 10% penalty for each wrong failing submission, including the first.<br></p><h3 style="font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; color: rgb(51, 51, 51);">Design hint</h3><p>You are strongly encouraged to write separate functions for reading the input (possibly multiple such functions), for displaying a square and for displaying a triangle. Your main function can then call those functions.</p>
<p><span style="color: inherit; font-family: inherit; font-size: 24px; font-weight: bold; line-height: 40px;">Sample Output</span><br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>10,20,...</penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>40</answerboxlines>
    <answerboxcolumns>90</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[__saved_input__ = input
def input(prompt=""):
    result = __saved_input__(prompt)
    print(result)
    return result

{{STUDENT_ANSWER}}

__student_answer__ = """{{ ESCAPED_STUDENT_ANSWER }}"""

{{TEST.testcode}}]]></template>
    <iscombinatortemplate>0</iscombinatortemplate>
    <answer><![CDATA["""A possible solution to Skool-is-Kool"""

def get_word(prompt, valid_responses):
    """Read text from the user, using the given prompt.
       The response must be in valid_responses; if not,
       an 'invalid response' message is issued and the
       user is reprompted.
    """
    result = input(prompt).lower()
    while result not in valid_responses:
        print('Invalid input. Try again.')
        result = input(prompt).lower()
    return result


def draw_square(size, filling):
    """ Draw a square, filled or unfilled according to whether filling is
        "filled" or not, of the given size.
    """
    for row in range(size):
        if row == 0 or row == size - 1 or filling == "filled":
            print(size * '*')
        elif size == 1:
            print('*')
        else:
            print('*' + (size - 2) * ' ' + '*')


def draw_triangle(size, filling):
    """ Draw a triangle, filled or unfilled according to whether filling is
        "filled" or not, of the given size.
    """
    for row in range(size):
        line_length = row + 1
        if line_length == 1 or line_length == size or filling == "filled":
            print(line_length * '*')
        else:
            print('*' + (line_length - 2) * ' ' + '*')


def draw_shape():
    """Ask the user for a shape, its size and whether it's
       filled. Draw the shape.
    """
    shape = get_word('Enter shape to draw: ', ['triangle', 'square'])
    filling = get_word('Filled or unfilled? ', ['filled', 'unfilled'])
    size = int(get_word('Size: ', [str(n) for n in range(1, 101)]))
    print()   # Blank line required
    if shape == 'square':
        draw_square(size, filling)
    elif shape == 'triangle':
        draw_triangle(size, filling)
    else:
        assert False


draw_shape()
]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>EqualityGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams>{"isfunction": false}</templateparams>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>square
filled
5</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: square
Filled or unfilled? filled
Size: 5

*****
*****
*****
*****
*****
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Square
unfilled
4</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: Square
Filled or unfilled? unfilled
Size: 4

****
*  *
*  *
****</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>TRIANGLE
UNFILLED
5</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: TRIANGLE
Filled or unfilled? UNFILLED
Size: 5

*
**
* *
*  *
*****</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Sqare
Square
Filed
Filled
200
-1
1</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: Sqare
Invalid input. Try again.
Enter shape to draw: Square
Filled or unfilled? Filed
Invalid input. Try again.
Filled or unfilled? Filled
Size: 200
Invalid input. Try again.
Size: -1
Invalid input. Try again.
Size: 1

*</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>triangle
filled
1</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: triangle
Filled or unfilled? filled
Size: 1

*</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>triangle
unfilled
1</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: triangle
Filled or unfilled? unfilled
Size: 1

*</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>square
unfilled
1</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: square
Filled or unfilled? unfilled
Size: 1

*</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>square
unfilled
2</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: square
Filled or unfilled? unfilled
Size: 2

**
**</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>square
filled
2</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: square
Filled or unfilled? filled
Size: 2

**
**</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>triangle
filled
2</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: triangle
Filled or unfilled? filled
Size: 2

*
**</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>triangle
unfilled
2</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: triangle
Filled or unfilled? unfilled
Size: 2

*
**</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>square
Unfilled
5</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: square
Filled or unfilled? Unfilled
Size: 5

*****
*   *
*   *
*   *
*****</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 902  -->
  <question type="coderunner">
    <name>
      <text>Skool-z-Kool Take 2</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>This is a variant of the Skool-z-Kool (a.k.a. "Shapes") program in which the students are provided with a skeleton version of the code. The behaviour of the program as a whole is tested, and also the behaviour of the functions specified in the skeleton (albeit somewhat superficially). <i>pylint</i>&nbsp;checking is also turned on.</p><p>In this question, students are shown only those test cases in the example table plus just the first failing test case, in order to reduce the amount of output displayed for wrong answers.</p><p>The advantage of this all-in-one approach is that students get a clearer view of the program as a whole, right from the start. The disadvantage is the increased complexity of the result table presented to the student. Also, students will not get any marks until they have the whole program working (although the question author could turn off "all-or-nothing" if they chose). If the question is broken into three separate questions that test the support functions followed by a question testing the main function, students will earn marks at each step they get working.</p><hr><p><span style="color: inherit; font-family: inherit; font-size: 28px; font-weight: bold; line-height: 40px;">Shapes</span><br></p>
<p>Welcome to Skool-z-Kool, a non-profit organisation that intends to develop simple Python programs for use by school children. The programs will have a dual role: they will be used to teach the younger children simple educational concepts, but will also be used as example programs for older children learning to program in Python.</p>
<p>As an enthusiastic volunteer, you have been invited to write a program to introduce young children to some different 2D geometric shapes. Your mentor has suggested that as a pilot study, you write a program dealing with just two shapes: squares and triangles. Both shapes will be drawn on the terminal as a pattern of asterisks (ie, *'s). The program first asks the user what shape is to be drawn, then asks whether the shape should be drawn filled or unfilled, and finally asks for the size. The required shape is then drawn and the program exits.</p>
<h3>Input</h3>
<p>The program reads three responses from the user (i.e. "standard input") as follows:</p>
<p>1. The shape to draw is requested from the user with the prompt <span style="font-family: 'courier new', 'courier', monospace;">"Enter shape to draw: "</span>.&nbsp;<em>Note that the prompt has a space after the colon.</em></p>
<p style="padding-left: 30px;">The only two acceptable inputs, which must be treated case-insensitively, are <span style="font-family: 'courier new', 'courier', monospace;">"square"</span> and <span style="font-family: 'courier new', 'courier', monospace;">"triangle"</span>. Any other response results in the error message <span style="font-family: 'courier new', 'courier', monospace;">"Invalid input. Try again."</span> and the prompt for input is repeated. This continues until a valid response is received.&nbsp;</p>
<p>2. The program then prompts the user with <span style="font-family: 'courier new', 'courier', monospace;">"Filled or unfilled? "</span> <em>(Note the space after the question mark)</em>.</p>
<p style="padding-left: 30px;">The user must enter (case-insensitively) either <span style="font-family: 'courier new', 'courier', monospace;">"filled"</span>&nbsp;or <span style="font-family: 'courier new', 'courier', monospace;">"unfilled"</span>; anything else results in the error message <span style="font-family: 'courier new', 'courier', monospace;">"Invalid input. Try again."</span> and the prompt for input is repeated, continuing until valid input is received.</p>
<p>3. The program lastly prompts the user for <span style="font-family: 'courier new', 'courier', monospace;">"Size: "</span> (with a space after the colon).</p>
<p style="padding-left: 30px;">A response in the range 1 to 100 inclusive is expected. Anything else gives the error message <span style="font-family: 'courier new', 'courier', monospace;">"Invalid input. Try again." </span>and repeats until a valid input is received.</p>
<h3>Output details</h3>
<p>Apart from the prompts and error messages as above, the output from the program is either</p>
<ol>
<li>a square of asterisks of the given size, unfilled or filled as in the examples below, or</li>
<li>a right-angled triangle with height and base-width of the given size and a vertical left-hand edge, unfilled or filled, as shown below.</li>
</ol>
<p>The output shape must be preceded by one extra blank line, following the final size prompt line.</p>
<p>For example, a typical run of the program might be:</p>
<p><tt>Enter shape to draw: <span style="text-decoration: underline;"><em>sqare</em></span><br>Invalid input. Try again.<br> Enter shape to draw: <span style="text-decoration: underline;"><em>square</em></span><br>Filled or unfilled? <span style="text-decoration: underline;"><em>unfilled</em></span><br> Size: <span style="text-decoration: underline;"><em>4</em></span></tt></p>
<pre>****
*  *
*  *
****
</pre>
<p>Note that in the example output above, the input that is typed by the interactive user is shown in underlined italics. In the examples and test output it is shown in plain text.</p><p>The penalty regime for this question is 10%, 20%, ..., i.e. there is a cumulative 10% penalty for each wrong failing submission, including the first.<br></p><h3 style="font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; color: rgb(51, 51, 51);">
Program Design&nbsp;</h3><p>Your program <i>must</i>&nbsp;be of the following form.</p>
<pre>"""A solution to the "shapes" question.
   Author: your-name-goes-here
   Date: current-date-goes=here"""

# **** OTHER SUPPORT FUNCTIONS GO HERE IF YOU WISH ****

def get_word(prompt, valid_responses):
    """Read text from the user, using the given prompt.
       The response must be in valid_responses; if not,
       an 'Invalid input. Try again.' message is issued and the
       user is re-prompted.
    """
   # *** YOUR CODE GOES HERE ***


def draw_square(size, filling):
    """ Draw a square, filled or unfilled according to whether filling has
        the value "filled" or not, of the given size.
    """
   # *** YOUR CODE GOES HERE ***


def draw_triangle(size, filling):
    """ Draw a triangle, filled or unfilled according to whether filling has
        the value "filled" or not, of the given size.
    """
    # *** YOUR CODE GOES HERE ***


def main():
    """Ask the user for a shape, its size and whether it's
       filled. Draw the shape.
    """
    # *** YOUR CODE GOES HERE ***


main()</pre>
<p><span style="color: inherit; font-family: inherit; font-size: 24px; font-weight: bold; line-height: 40px;">Sample Output</span><br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3_cosc121</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>10,20,...</penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>40</answerboxlines>
    <answerboxcolumns>90</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <answer><![CDATA["""A possible solution to Skool-is-Kool"""

def get_word(prompt, valid_responses):
    """Read text from the user, using the given prompt.
       The response must be in valid_responses; if not,
       an 'invalid response' message is issued and the
       user is reprompted.
    """
    result = input(prompt).lower()
    while result not in valid_responses:
        print('Invalid input. Try again.')
        result = input(prompt).lower()
    return result


def draw_square(size, filling):
    """ Draw a square, filled or unfilled according to whether filling is
        "filled" or not, of the given size.
    """
    for row in range(size):
        if row == 0 or row == size - 1 or filling == "filled":
            print(size * '*')
        elif size == 1:
            print('*')
        else:
            print('*' + (size - 2) * ' ' + '*')


def draw_triangle(size, filling):
    """ Draw a triangle, filled or unfilled according to whether filling is
        "filled" or not, of the given size.
    """
    for row in range(size):
        line_length = row + 1
        if line_length == 1 or line_length == size or filling == "filled":
            print(line_length * '*')
        else:
            print('*' + (line_length - 2) * ' ' + '*')


def draw_shape():
    """Ask the user for a shape, its size and whether it's
       filled. Draw the shape.
    """
    shape = get_word('Enter shape to draw: ', ['triangle', 'square'])
    filling = get_word('Filled or unfilled? ', ['filled', 'unfilled'])
    size = int(get_word('Size: ', [str(n) for n in range(1, 101)]))
    print()   # Blank line required
    if shape == 'square':
        draw_square(size, filling)
    elif shape == 'triangle':
        draw_triangle(size, filling)
    else:
        assert False

def main():
    """Call the shape drawing function"""
    draw_shape()

main()
]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams><![CDATA[{"stripmain":true, "runextra":true, "isfunction":false}]]></templateparams>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text># Testing your program
# as a whole</text>
      </testcode>
      <stdin>
                <text>square
filled
5</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: square
Filled or unfilled? filled
Size: 5

*****
*****
*****
*****
*****
</text>
      </expected>
      <extra>
                <text>main()</text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text># Testing your program
# as a whole</text>
      </testcode>
      <stdin>
                <text>TRIANGLE
UNFILLED
5</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: TRIANGLE
Filled or unfilled? UNFILLED
Size: 5

*
**
* *
*  *
*****</text>
      </expected>
      <extra>
                <text>main()</text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text># Testing your program
# as a whole</text>
      </testcode>
      <stdin>
                <text>Sqare
Square
Filed
Filled
200
-1
1</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: Sqare
Invalid input. Try again.
Enter shape to draw: Square
Filled or unfilled? Filed
Invalid input. Try again.
Filled or unfilled? Filled
Size: 200
Invalid input. Try again.
Size: -1
Invalid input. Try again.
Size: 1

*</text>
      </expected>
      <extra>
                <text>main()</text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text># Testing your program
# as a whole</text>
      </testcode>
      <stdin>
                <text>square
Unfilled
5</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: square
Filled or unfilled? Unfilled
Size: 5

*****
*   *
*   *
*   *
*****</text>
      </expected>
      <extra>
                <text>main()</text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text># Testing your program
# as a whole</text>
      </testcode>
      <stdin>
                <text>Square
unfilled
4</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: Square
Filled or unfilled? unfilled
Size: 4

****
*  *
*  *
****</text>
      </expected>
      <extra>
                <text>main()</text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text># Testing your program
# as a whole</text>
      </testcode>
      <stdin>
                <text>triangle
filled
1</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: triangle
Filled or unfilled? filled
Size: 1

*</text>
      </expected>
      <extra>
                <text>main()</text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text># Testing your program
# as a whole</text>
      </testcode>
      <stdin>
                <text>triangle
unfilled
1</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: triangle
Filled or unfilled? unfilled
Size: 1

*</text>
      </expected>
      <extra>
                <text>main()</text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text># Testing your program
# as a whole</text>
      </testcode>
      <stdin>
                <text>square
unfilled
1</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: square
Filled or unfilled? unfilled
Size: 1

*</text>
      </expected>
      <extra>
                <text>main()</text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text># Testing your program
# as a whole</text>
      </testcode>
      <stdin>
                <text>square
unfilled
2</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: square
Filled or unfilled? unfilled
Size: 2

**
**</text>
      </expected>
      <extra>
                <text>main()</text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text># Testing your program
# as a whole</text>
      </testcode>
      <stdin>
                <text>square
filled
2</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: square
Filled or unfilled? filled
Size: 2

**
**</text>
      </expected>
      <extra>
                <text>main()</text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text># Testing your program
# as a whole</text>
      </testcode>
      <stdin>
                <text>triangle
filled
2</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: triangle
Filled or unfilled? filled
Size: 2

*
**</text>
      </expected>
      <extra>
                <text>main()</text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text># Testing your program
# as a whole</text>
      </testcode>
      <stdin>
                <text>triangle
unfilled
2</text>
      </stdin>
      <expected>
                <text>Enter shape to draw: triangle
Filled or unfilled? unfilled
Size: 2

*
**</text>
      </expected>
      <extra>
                <text>main()</text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[# Testing your getWord function
# Your call to main() is ignored here.
prompt = "How are you? "
ans = get_word(prompt, ['ill', 'ok'])
print("You said " + ans.lower())]]></text>
      </testcode>
      <stdin>
                <text>Fine thanks
Not so great
Fair to middling
Willy nilly
OK
</text>
      </stdin>
      <expected>
                <text>How are you? Fine thanks
Invalid input. Try again.
How are you? Not so great
Invalid input. Try again.
How are you? Fair to middling
Invalid input. Try again.
How are you? Willy nilly
Invalid input. Try again.
How are you? OK
You said ok</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text># Testing your draw_square function
# Your call to main() is ignored here.
draw_square(5, 'unfilled')</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>*****
*   *
*   *
*   *
*****</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text># Testing your draw_triangle function
# Your call to main() is ignored here.
draw_triangle(5, 'unfilled')</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>*
**
* *
*  *
*****</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE_IF_SUCCEED</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 883  -->
  <question type="coderunner">
    <name>
      <text>sqr function</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<h5>Write a <i>sqr(n) </i>function</h5><p>Write a Python3 function <i>sqr(n) </i>that returns the square of its numeric parameter <i>n</i>.</p><p>For those who don't know Python, one possible answer is:<br></p>
<pre style="background-color:#DDD">def sqr(n):
    return n * n</pre><p>Copy that answer into the answer box and click <i>Check</i>&nbsp;to see how CodeRunner questions behave. Then try changing the answer in various ways and re-checking.</p><p>Note that CodeRunner questions are expected to be run in a quiz using Moodle's <i>adaptive</i>&nbsp;behaviour, in which students can check each question as they submit it. A flexible penalty mechanism allows the question author to specify varying re-submission penalties. In this question the first wrong submission is free, but thereafter the penalties are 10%, 20%, 30%, ...</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0, 10, 20, ...</penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>5</answerboxlines>
    <answerboxcolumns>70</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <answer>def sqr(n):
    '''The generic sqr function'''
    return n * n</answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print(sqr(-3))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>9</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print(sqr(11))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>121</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print(sqr(-4))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>16</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print(sqr(0))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>0</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print(sqr(-100))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>10000</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 884  -->
  <question type="coderunner">
    <name>
      <text>sqr function showing repr</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<h5>A variant on sqr(n)</h5><p>The standard write-a-function Python3 question type executes the student's code first followed by the code shown in the Test column of the results table. This makes it easy for students to test their functions prior to submission (assuming they're sitting at a computer with their usual programming tools available): they just copy the test code after their program and run the program.</p><p>An alternative, favoured by some question authors, is to print the result of the function call, showing the student only the actual call as though they had typed it into the Python shell. This question presents the results that way, using a customised template. The question is otherwise identical to the previous one, viz:</p><p><b>Write a Python3 function <i>sqr(n) </i>that returns the square of its numeric parameter <i>n</i>.</b></p><p>As before, a possible answer is:<br></p>
<pre style="background-color:#DDD">def sqr(n):
    return n * n</pre><p><br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0, 10, 20, ...</penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>5</answerboxlines>
    <answerboxcolumns>70</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[{{ STUDENT_ANSWER }}

__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

SEPARATOR = "#<ab@17943918#@>#"

{% for TEST in TESTCASES %}
print(repr({{ TEST.testcode }}))
{% if not loop.last %}
print(SEPARATOR)
{% endif %}
{% endfor %}]]></template>
    <iscombinatortemplate></iscombinatortemplate>
    <answer>def sqr(n):
    '''The generic sqr function'''
    return n * n</answer>
    <validateonsave>1</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>EqualityGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>sqr(-3)</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>9</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>sqr(11)</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>121</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>sqr(-4)</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>16</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>sqr(0)</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>0</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>sqr(-100)</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>10000</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 887  -->
  <question type="description">
    <name>
      <text>Intro to write-a-program questions</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<h4>Write-a-program questions</h4><p>Write-a-function questions are convenient because we can specify the input data and the output result without the complexities of having to specify the formats of input and output files. All the same, for larger tasks like assignments, "write a program" questions are the norm. Typically these ask students to read from standard input and write to standard output. Learner programmers think of these as keyboard and screen but on a quiz server data is of course taken from files. For testing such programs, the question author supplies standard input and specifies the expected output just as for write-a-function programs. The question author can also attach support files to the question; these are loaded into the execution environment at run time and can be used for input data or additional code, libraries etc, depending on the type of question.</p><p>A problem with running program that take their standard input from a file rather than the keyboard is that the input data does not get echoed to the screen. This is confusing for learner programmers. Our standard Python program question type replaces the usual Python <i>input()</i>&nbsp;function with one that <i>does</i>&nbsp;echo its input to standard output, so that the student sees the same output as when they run from the keyboard.&nbsp;</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>0.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
  </question>

<!-- question: 882  -->
  <question type="description">
    <name>
      <text>Introduction</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<h3>Welcome to the CodeRunner Demo Quiz</h3><p>This quiz is a tutorial introduction to CodeRunner questions from simple write-a-function or write-a-program questions through assignment level questions into advanced customised questions to deal with special situations like GUI programming.</p><p>Python3 is used throughout this quiz. If you're not a Python3 programmer you can still look through the range of questions that can be asked. With few exceptions, similar questions can be asked in all supported languages (Python3, Python2, Java, C, C++, PHP, JavaScript, Octave, Pascal) though you might have to write your own prototypes for many of those.</p><p>You can do this quiz as many times as you like. When you submit the whole quiz at the end, you can review your answers and see the author's sample solutions. This is a standard Moodle feature; the quiz administrator can choose whether or not to display so-called "right answers", and various other information at various phases during the quiz.</p><p>We start with <i>write-a-function</i>&nbsp;questions, for which the student must submit a function satisfying the given specs. Since the student's code is run before the test code is run, the student's submission can always include additional support functions if necessary, so the specified function can be almost arbitrarily demanding, such "write a function that compiles a given source file in language X".</p><p>All the questions in this quiz are included in the CodeRunner repository at <a href="https://github.com/trampgeek/CodeRunner">https://github.com/trampgeek/CodeRunner</a>.</p><p>[Note: this quiz is work-in-progress. If new questions get added, all existing submissions will have to be deleted, so you won't necessarily be able to return to the site at a later date and see your answers. If you want to keep them, copy them to your own machine.]</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>0.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
  </question>

<!-- question: 1027  -->
  <question type="description">
    <name>
      <text>Other question types (intro)</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<h4>Other question types</h4><p>The above questions have asked students to write a function (possibly with additional support functions) or to write a whole program. The remaining questions show a few other forms of question. Essentially you can ask&nbsp;<i>any</i>&nbsp;question you like subject to two requirements:</p><p><ol><li>The student submission is a single piece of text (usually, but not necessarily, program code)<br></li><li>You, the question author, are able to write a program that can assess the correctness of that submission.</li></ol></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>0.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
  </question>

<!-- question: 901  -->
  <question type="description">
    <name>
      <text>Skool-z-kool discussion</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<h4>A note on templates</h4><p>The preceding <i>Skool-z-Kool</i>&nbsp;question used the basic Python3 question type, but with the built-in <i>input</i>&nbsp;function replaced by one that echoes the characters read from standard input. This is achieved by customising the question's template in the question-authoring interface. The template is a way to specify how the student's submission, the per-test-case code and any other testing code are combined to define the program to be run in the sandbox. For the above question, the template was just</p>
<pre>__saved_input__ = input
def input(prompt=""):
    result = __saved_input__(prompt)
    print(result)
    return result

{{STUDENT_ANSWER}}

{{TEST.testcode}}
</pre>
<p>The effect is just to re-define the <i>input</i> function, run the student code and then run the test code.</p><p>If you find yourself using such a template repeatedly, you would normally make it into a new question type, such as <i>python3_with_input</i>, by defining the question as a <i>prototype</i>. See the CodeRunner documentation for details.</p><h4>Improving <i>Skool-z-Kool</i></h4><p>A problem with the preceding version of <i>Skool-z-Kool</i>&nbsp;is that it while it <i>suggests</i>&nbsp;that students should write the code with support functions, they are not forced to do so. Beginner programmers often need more encouragement than that!</p><p>The first improvement we can make to the question is to use <i>pylint</i>&nbsp;to check the submission before running it, as was done with the second version of <i>print_name</i>. In our introductory programming course we turn on pylint checking almost from the start. Our&nbsp;<i>python_cosc121</i>&nbsp;question type, used for most questions in the course, allows us to configure pylint differently for each question by using template parameters. In a question like <i>Skool-z-Kool</i>&nbsp;we would typically limit the length of any one function to around 10 - 20 lines, which pretty much forces students to use functions.</p><p>Particularly earlier on in a course we might wish to constrain the students even further, so that they are forced to use a particularly functional decomposition. That of course requires that we specify the support functions they must use and also that we must test those functions separately. A common way of achieving that is to precede the main program test question with a set of <i>write-a-function</i>&nbsp;questions, one for each support function we wish them to write. An alternative approach is that taken by the following variant of Skool-z-Kool, which presents the students with a skeleton of the program. They then have to fill in all the blanks to get the program working. Note that in our teaching environments students always have a full Python development environment available to them while doing CodeRunner questions, even in tests and exams. They are expected to develop and test their code <i>before</i>&nbsp;submitting it to the quiz server.</p><p><br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>0.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
  </question>

</quiz>